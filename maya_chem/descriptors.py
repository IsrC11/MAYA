# -*- coding: utf-8 -*-
"""descriptors.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17dOfxu14PYMjtyMkzxSYwDYFqB2JaeBU
"""

# maya/descriptors.py
from rdkit import Chem, DataStructs
from rdkit.Chem import AllChem, MACCSkeys, Descriptors
from skfp.fingerprints import MAPFingerprint
import pandas as pd
import numpy as np
from typing import List, Tuple, Optional
from joblib import Parallel, delayed
try:
    from signaturizer3d import Signaturizer, CCSpace
except ImportError:
    Signaturizer = None

def compute_druglikeness_descriptors(mols: List, df: pd.DataFrame) -> pd.DataFrame:
    """Compute drug-likeness descriptors."""
    desc = pd.DataFrame({
        "HBA": [Descriptors.NumHAcceptors(m) for m in mols],
        "LogP": [Descriptors.MolLogP(m) for m in mols],
        "TPSA": [Descriptors.TPSA(m) for m in mols],
        "MW": [Descriptors.MolWt(m) for m in mols],
        "HBD": [Descriptors.NumHDonors(m) for m in mols],
        "RB": [Descriptors.NumRotatableBonds(m) for m in mols]
    })
    for col in desc.columns:
        desc[f'size_point_{col}'] = 7 + np.log1p((desc[col] - desc[col].min()) / (desc[col].max() - desc[col].min() + 1e-6)) * 12
    return desc

def compute_fingerprints_and_similarity(mols: List, desc_type: str, radius: Optional[int], n_jobs: int) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """Compute fingerprints and similarity matrix."""
    if desc_type == 'MACCS':
        fps = [MACCSkeys.GenMACCSKeys(m) for m in mols]
    elif desc_type == 'ECFP':
        fps = [AllChem.GetMorganFingerprintAsBitVect(m, radius or 3, nBits=2048) for m in mols]
    elif desc_type == 'MAP4':
        map4 = MAP4Fingerprint()
        fps = [map4.transform([Chem.MolToSmiles(m)])[0] for m in mols]
        fps = [DataStructs.ExplicitBitVect([int(b) for b in fp]) for fp in fps]
    else:
        raise ValueError(f"Unknown descriptor: {desc_type}")

    def compute_sim(fp, fps_list):
        return [round(DataStructs.TanimotoSimilarity(fp, f), 3) for f in fps_list]

    sim_matrix = np.array(Parallel(n_jobs=n_jobs)(delayed(compute_sim)(fp, fps) for fp in fps))
    np.fill_diagonal(sim_matrix, 1.0)
    ids = df[df.columns[0]].tolist()[:len(fps)]  # Use first column as ID (assumes ID is first)
    return pd.DataFrame(fps), pd.DataFrame(sim_matrix, index=ids, columns=ids)

def compute_signaturizer(smiles: List[str], codes: List[str]) -> pd.DataFrame:
    """Compute signaturizer fingerprints."""
    if not Signaturizer:
        logging.warning("Signaturizer not available; skipping.")
        return pd.DataFrame()
    mapping = {
        'A1': CCSpace.A1, 'A2': CCSpace.A2, 'A3': CCSpace.A3, 'A4': CCSpace.A4, 'A5': CCSpace.A5,
        'B1': CCSpace.B1, 'B2': CCSpace.B2, 'B3': CCSpace.B3, 'B4': CCSpace.B4, 'B5': CCSpace.B5,
        'C1': CCSpace.C1, 'C2': CCSpace.C2, 'C3': CCSpace.C3, 'C4': CCSpace.C4, 'C5': CCSpace.C5,
        'D1': CCSpace.B1, 'D2': CCSpace.B2, 'D3': CCSpace.B3, 'D4': CCSpace.B4, 'D5': CCSpace.B5,
        'E1': CCSpace.E1, 'E2': CCSpace.E2, 'E3': CCSpace.E3, 'E4': CCSpace.E4, 'E5': CCSpace.E5
    }
    valid_codes = [c for c in codes if c in mapping]
    if not valid_codes:
        raise ValueError("No valid signaturizer codes provided.")
    sig_dfs = []
    for code in valid_codes:
        sig = Signaturizer(mapping[code]).infer_from_smiles(smiles)
        sig_dfs.append(pd.DataFrame(sig, columns=[f'{code}_{i}' for i in range(sig.shape[1])]))
    return pd.concat(sig_dfs, axis=1)
