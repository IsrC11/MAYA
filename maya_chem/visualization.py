# -*- coding: utf-8 -*-
"""visualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I-AVbcuLOaV_AUwPWRGTabRFhk0oDxe8
"""

# maya/visualization.py
import plotly.express as px
import plotly.io as pio
import pandas as pd
from .config import MayaConfig
import logging
try:
    import molplotly
except ImportError:
    molplotly = None

def create_interactive_plot(df: pd.DataFrame, config: MayaConfig, method: str, desc_type: str) -> px.Figure:
    """Create an interactive scatter plot."""
    x, y = (f'{method}_1', f'{method}_2')
    title = f"{method} - {desc_type.replace('druglikeness', 'Drug-likeness')}"
    if desc_type == 'signaturizer' and config.signaturizer_codes:
        title = f"{method} - Signaturizer ({config.signaturizer_codes[0]})"
    fig = px.scatter(df, x=x, y=y, color=config.data['metric_name'], color_continuous_scale=config.viz['palette'],
                     title=title, width=1200, height=900)
    fig.update_traces(marker=dict(size=df[config.viz['size_repr']], symbol=config.viz['shape'],
                                  line=dict(width=2, color='black'), opacity=1))
    fig.update_layout(
        title_font_size=25, plot_bgcolor='white', paper_bgcolor='white',
        xaxis=dict(showgrid=False, showline=True, linecolor='black', title_font_size=30, tickfont_size=25),
        yaxis=dict(showgrid=False, showline=True, linecolor='black', title_font_size=30, tickfont_size=25),
        coloraxis_colorbar=dict(title=config.data['metric_name'], title_side='bottom', orientation='h',
                                xanchor='center', yanchor='bottom', thickness=15, len=0.6, y=-0.29,
                                title_font_size=30, tickfont_size=18)
    )
    pio.write_image(fig, f"{config.viz['output_dir']}/fig_{method}_{desc_type}.png")
    if molplotly:
        try:
            caption_cols = ['Canonical_Smiles', 'PC1_contribution', 'PC2_contribution'] if method == 'PCA' else ['Canonical_Smiles']
            app = molplotly.add_molecules(fig, df, smiles_col='Canonical_Smiles',
                                         title_col=config.data['id_col'],
                                         color_col=config.data['metric_name'],
                                         caption_cols=caption_cols)
            app.run_server(mode='inline')
        except:
            logging.warning("Molplotly failed; using standard plot.")
    return fig
