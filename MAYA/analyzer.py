# -*- coding: utf-8 -*-
"""analyzer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KWMncgzQkGfwArg8ddzBFhPfwKlyLVHZ
"""

# maya/analyzer.py
from typing import Dict, Optional
from .config import MayaConfig
from .data import load_dataset, preprocess_smiles
from .descriptors import compute_druglikeness_descriptors, compute_fingerprints_and_similarity, compute_signaturizer
from .reduction import apply_reduction
from .visualization import create_interactive_plot
from .utils import compute_activity_metrics
import pandas as pd
import os
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class MayaAnalyzer:
    """Main class for chemical multiverse analysis."""
    def __init__(self, config: Optional[MayaConfig] = None):
        self.config = config or MayaConfig()
        self.df: pd.DataFrame = None
        self.mols: list = None
        self.results: Dict = {'dfs': {}, 'plots': {}, 'metrics': {}}

    def load_and_preprocess(self, dataset: str) -> None:
        """Load dataset and preprocess SMILES."""
        self.df = load_dataset(dataset, self.config)
        self.df, self.mols = preprocess_smiles(self.df, self.config.data['smiles_col'], self.config.parallel['n_jobs'])
        self.df = compute_activity_metrics(self.df, self.config.data['activities'],
                                          self.config.data['eval_metric'], self.config.data['metric_name'])
        logging.info("Data loaded and preprocessed.")

    def compute_descriptors(self) -> None:
        """Compute descriptors and similarity matrices."""
        if 'druglikeness' in self.config.descriptors:
            desc_df = compute_druglikeness_descriptors(self.mols, self.df)
            self.results['dfs']['druglikeness_desc'] = desc_df
            self.df = pd.concat([self.df, desc_df], axis=1)
        for desc_type in [d for d in self.config.descriptors if d in ['MACCS', 'ECFP', 'MAP4']]:
            fps, sim_matrix = compute_fingerprints_and_similarity(self.mols, desc_type,
                                                                 self.config.ecfp_radius if desc_type == 'ECFP' else None,
                                                                 self.config.parallel['n_jobs'])
            self.results['dfs'][f'{desc_type}_desc'] = fps
            self.results['dfs'][f'{desc_type}_sim'] = sim_matrix
        if 'signaturizer' in self.config.descriptors and self.config.signaturizer_codes:
            sig_df = compute_signaturizer(self.df['Canonical_Smiles'].tolist(), self.config.signaturizer_codes)
            self.results['dfs']['signaturizer_desc'] = sig_df
        logging.info("Descriptors computed.")

    def reduce_and_visualize(self) -> None:
        """Apply dimensionality reduction and generate plots."""
        for desc_type in [d for d in self.config.descriptors if f'{d}_desc' in self.results['dfs'] or f'{d}_sim' in self.results['dfs']]:
            data = self.results['dfs'].get(f'{desc_type}_desc') or self.results['dfs'].get(f'{desc_type}_sim')
            if not isinstance(data, np.ndarray):
                data = data.values
            for method in self.config.reduction['methods']:
                reduced, metrics = apply_reduction(data, method,
                                                  perplexity=self.config.reduction['perplexity'],
                                                  n_iter=self.config.reduction['n_iter'])
                key = f'{desc_type}_{method.lower()}'
                reduced_df = pd.DataFrame({
                    self.config.data['id_col']: self.df[self.config.data['id_col']],
                    'Canonical_Smiles': self.df['Canonical_Smiles'],
                    f'{method}_1': reduced[:, 0],
                    f'{method}_2': reduced[:, 1]
                })
                reduced_df = pd.merge(reduced_df, self.df, on=['Canonical_Smiles', self.config.data['id_col']], how='inner')
                if method == 'PCA':
                    reduced_df[['PC1_contribution', 'PC2_contribution']] = reduced[:, :2]**2 / (reduced[:, :2]**2).sum(axis=0)
                self.results['dfs'][key] = reduced_df
                self.results['metrics'][key] = metrics
                logging.info(f"{key} Metrics: Trustworthiness={metrics['trust']:.3f}, Correlation={metrics['corr']:.3f}")
                self.results['plots'][key] = create_interactive_plot(reduced_df, self.config, method, desc_type)
        logging.info("Reduction and visualization completed.")

    def run(self, dataset: str) -> Dict:
        """Run the full pipeline."""
        os.makedirs(self.config.viz['output_dir'], exist_ok=True)
        self.load_and_preprocess(dataset)
        self.compute_descriptors()
        self.reduce_and_visualize()
        for key, df in self.results['dfs'].items():
            df.to_csv(os.path.join(self.config.viz['output_dir'], f'{key}.csv'), index=False)
        for key, fig in self.results['plots'].items():
            fig.write_html(os.path.join(self.config.viz['output_dir'], f'{key}.html'))
        return self.results

def chemical_multiverse(dataset: str, config: Optional[MayaConfig] = None) -> Dict:
    """Wrapper function for MayaAnalyzer."""
    analyzer = MayaAnalyzer(config)
    return analyzer.run(dataset)